$date
	Wed Oct 16 21:27:17 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! y_xor $end
$var wire 1 " y_xnor $end
$var wire 1 # y_or $end
$var wire 1 $ y_not $end
$var wire 1 % y_nand $end
$var wire 1 & y_and $end
$var reg 1 ' a $end
$var reg 1 ( b $end
$scope module and1 $end
$var wire 1 ' a $end
$var wire 1 ( b $end
$var wire 1 & y $end
$scope module and_gate $end
$var wire 1 ) a $end
$var wire 1 ( b $end
$var wire 1 ' sel $end
$var wire 1 & y $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 ' a $end
$var wire 1 ( b $end
$var wire 1 % y $end
$var wire 1 * b_inv $end
$scope module nand_gate $end
$var wire 1 + a $end
$var wire 1 ' sel $end
$var wire 1 % y $end
$var wire 1 * b $end
$upscope $end
$scope module not1 $end
$var wire 1 ( a $end
$var wire 1 * y $end
$scope module not_gate $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 ( sel $end
$var wire 1 * y $end
$upscope $end
$upscope $end
$upscope $end
$scope module not1 $end
$var wire 1 ' a $end
$var wire 1 $ y $end
$scope module not_gate $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 ' sel $end
$var wire 1 $ y $end
$upscope $end
$upscope $end
$scope module or1 $end
$var wire 1 ' a $end
$var wire 1 ( b $end
$var wire 1 # y $end
$scope module or_gate $end
$var wire 1 ( a $end
$var wire 1 0 b $end
$var wire 1 ' sel $end
$var wire 1 # y $end
$upscope $end
$upscope $end
$scope module xnor1 $end
$var wire 1 ' a $end
$var wire 1 ( b $end
$var wire 1 " y $end
$var wire 1 1 b_inv $end
$scope module not1 $end
$var wire 1 ( a $end
$var wire 1 1 y $end
$scope module not_gate $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 ( sel $end
$var wire 1 1 y $end
$upscope $end
$upscope $end
$scope module xor_gate $end
$var wire 1 1 a $end
$var wire 1 4 b $end
$var wire 1 ' sel $end
$var wire 1 " y $end
$upscope $end
$upscope $end
$scope module xor1 $end
$var wire 1 ' a $end
$var wire 1 ( b $end
$var wire 1 ! y $end
$var wire 1 5 b_inv $end
$scope module not1 $end
$var wire 1 ( a $end
$var wire 1 5 y $end
$scope module not_gate $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 ( sel $end
$var wire 1 5 y $end
$upscope $end
$upscope $end
$scope module xor_gate $end
$var wire 1 ( a $end
$var wire 1 5 b $end
$var wire 1 ' sel $end
$var wire 1 ! y $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
07
16
15
04
03
12
11
10
0/
1.
0-
1,
1+
1*
0)
0(
0'
0&
1%
1$
0#
1"
0!
$end
#10
0"
0*
1#
01
05
1!
1(
#20
1*
11
15
1%
0$
1!
0(
1'
#30
0%
0!
1&
0*
01
05
1(
#40
